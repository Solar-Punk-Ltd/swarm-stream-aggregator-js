/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common.js';

export interface SwarmEventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature: 'addToWhitelist' | 'admin' | 'emitMessage' | 'removeFromWhitelist' | 'whitelisted',
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'MessageLogged' | 'RemovedFromWhitelist' | 'Whitelisted'): EventFragment;

  encodeFunctionData(functionFragment: 'addToWhitelist', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emitMessage', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeFromWhitelist', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'whitelisted', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'addToWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelisted', data: BytesLike): Result;
}

export namespace MessageLoggedEvent {
  export type InputTuple = [sender: AddressLike, message: string];
  export type OutputTuple = [sender: string, message: string];
  export interface OutputObject {
    sender: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedFromWhitelistEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwarmEventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): SwarmEventEmitter;
  waitForDeployment(): Promise<this>;

  interface: SwarmEventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  addToWhitelist: TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;

  admin: TypedContractMethod<[], [string], 'view'>;

  emitMessage: TypedContractMethod<[message: string], [void], 'nonpayable'>;

  removeFromWhitelist: TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;

  whitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'addToWhitelist'): TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'admin'): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'emitMessage'): TypedContractMethod<[message: string], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeFromWhitelist',
  ): TypedContractMethod<[account: AddressLike], [void], 'nonpayable'>;
  getFunction(nameOrSignature: 'whitelisted'): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>;

  getEvent(
    key: 'MessageLogged',
  ): TypedContractEvent<MessageLoggedEvent.InputTuple, MessageLoggedEvent.OutputTuple, MessageLoggedEvent.OutputObject>;
  getEvent(
    key: 'RemovedFromWhitelist',
  ): TypedContractEvent<
    RemovedFromWhitelistEvent.InputTuple,
    RemovedFromWhitelistEvent.OutputTuple,
    RemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: 'Whitelisted',
  ): TypedContractEvent<WhitelistedEvent.InputTuple, WhitelistedEvent.OutputTuple, WhitelistedEvent.OutputObject>;

  filters: {
    'MessageLogged(address,string)': TypedContractEvent<
      MessageLoggedEvent.InputTuple,
      MessageLoggedEvent.OutputTuple,
      MessageLoggedEvent.OutputObject
    >;
    MessageLogged: TypedContractEvent<
      MessageLoggedEvent.InputTuple,
      MessageLoggedEvent.OutputTuple,
      MessageLoggedEvent.OutputObject
    >;

    'RemovedFromWhitelist(address)': TypedContractEvent<
      RemovedFromWhitelistEvent.InputTuple,
      RemovedFromWhitelistEvent.OutputTuple,
      RemovedFromWhitelistEvent.OutputObject
    >;
    RemovedFromWhitelist: TypedContractEvent<
      RemovedFromWhitelistEvent.InputTuple,
      RemovedFromWhitelistEvent.OutputTuple,
      RemovedFromWhitelistEvent.OutputObject
    >;

    'Whitelisted(address)': TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
  };
}
